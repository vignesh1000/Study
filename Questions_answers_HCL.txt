Wild Pointer:
	Uninitialized pointers are known as wild pointers because they point to some arbitrary memory location and may cause a program to crash or behave badly. ... If we want pointer to a value (or set of values) without having a variable for the value, we should explicitly allocate memory and put the value in allocated memory.

Function Pointer:
A function pointer, also called a subroutine pointer or procedure pointer, is a pointer that points to a function. As opposed to referencing a data value, a function pointer points to executable code within memory.

Uses:
Mainly used for callback mechanism.

Dangling Pointer:
	Dangling pointer occurs at the time of the object destruction when the object is deleted or de-allocated from memory without modifying the value of the pointer.

Diff between Malloc and Calloc:
	Malloc() function will create a single block of memory of size specified by the user. Calloc() function can assign multiple blocks of memory for a variable. Malloc function contains garbage value. The memory block allocated by a calloc function is always initialized to zero.

Pragma pack:
	#pragma pack instructs the compiler to pack structure members with particular alignment. Most compilers, when you declare a struct, will insert padding between members to ensure that they are aligned to appropriate addresses in memory (usually a multiple of the type's size).

Stack during function calls:
	The function call stack is the perfect data structure for handling this information. Each time a function calls another function, an entry is pushed onto the stack. This entry, called a stack frame or an activation record, contains the return address that the called function needs to return to the calling function.
It is also used for storing the local variables, return addresses for returing after the function call.

Gcc compiler steps:
gcc stands for GNU compiler collection.
 There are four steps to the compilation process: preprocessing, compiling, assembly, and linking.
Preprocessing - comments lines will be removed from code, macros will be replaced, expansion of header files.
output of preprocessor - .i files.
Compiling - c files will be compiled and output will be as .s files
output of compiler - .s files.
Assembling - All compiled files will be assembled into object files.
output of assembler - .o files.
Linking - Combines all the object files and produces a single executable file.
output of linker - .hex or exe files.

Top and Bottom Halves:
Interrupt: An interrupt is an event that alter the sequence of instruction executed by a processor in corresponding to electrical signal generated by HW circuit both inside & outside CPU.

When any interrupt is generated it is handled by two halves.

1) Top Halves

2) Bottom Halves

Top Halves: Top halves executes as soon as CPU receives the interrupt. In the Top Halves Context Interrupt and Scheduler are disabled. This part of the code only contain Critical Code. Execution Time of this code should be as short as possible because at this time Interrupt are disabled, we don't want to miss out other interrupt by generated by the devices.

Bottom Halves: The Job of the Bottom half is used to run left over (deferred) work by the top halves. When this piece of code is being Executed interrupt is Enabled and Scheduler is Disabled. Bottom Halves are scheduled by Softirqs & Tasklets to run deferred work
Note: The top halves code should be as short as possible or deterministic time and should not contain any blocking calls as well.

Interrupts in a linux based systems is done in two halves since the top half can service a new interrupt while the bottom half is performing other interrupt.

Fastest way to find loops in a linked list:
	"Floyd's cycle-finding algorithm"

Thread-process difference:
Process: 
Process means any program is in execution. Process control block controls the operation of any process. Process Control Block(PCB) contains information about processes for example process priority, process id, process state, CPU, register, etc. A process can creates other processes which are known as Child Processes. Process takes more time to terminate and it is isolated means it does not share memory with any other process. 

The process can have the following states like new, ready, running, waiting, terminated, suspended. 

Thread: 
Thread is the segment of a process means a process can have multiple threads and these multiple threads are contained within a process. A thread have 3 states: running, ready, and blocked. 

Thread takes less time to terminate as compared to process but unlike process threads do not isolate. They share the same memory and address space.

Diff between Fork() and clone():
Fork - fork creates a child process and the child starts its execution where the fork system call is called in the parent process.
clone - clone creates a new process and child starts execution from a function pointed when creation of a clone.




